/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package calendly.calendly.models.operations;

import calendly.calendly.utils.SpeakeasyMetadata;
import java.time.OffsetDateTime;

public class ListActivityLogRequest {
    /**
     * The action(s) associated with the entries
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=action")
    public String[] action;
    public ListActivityLogRequest withAction(String[] action) {
        this.action = action;
        return this;
    }
    
    /**
     * Return entries from the user(s) associated with the provided URIs
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=actor")
    public String[] actor;
    public ListActivityLogRequest withActor(String[] actor) {
        this.actor = actor;
        return this;
    }
    
    /**
     * The number of rows to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=count")
    public Long count;
    public ListActivityLogRequest withCount(Long count) {
        this.count = count;
        return this;
    }
    
    /**
     * Include entries that occurred prior to this time (sample time format: "2020-01-02T03:04:05.678Z"). This time should use the UTC timezone.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_occurred_at")
    public OffsetDateTime maxOccurredAt;
    public ListActivityLogRequest withMaxOccurredAt(OffsetDateTime maxOccurredAt) {
        this.maxOccurredAt = maxOccurredAt;
        return this;
    }
    
    /**
     * Include entries that occurred after this time (sample time format: "2020-01-02T03:04:05.678Z"). This time should use the UTC timezone.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_occurred_at")
    public OffsetDateTime minOccurredAt;
    public ListActivityLogRequest withMinOccurredAt(OffsetDateTime minOccurredAt) {
        this.minOccurredAt = minOccurredAt;
        return this;
    }
    
    /**
     * The categories of the entries
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=namespace")
    public String[] namespace;
    public ListActivityLogRequest withNamespace(String[] namespace) {
        this.namespace = namespace;
        return this;
    }
    
    /**
     * Return activity log entries from the organization associated with this URI
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization")
    public String organization;
    public ListActivityLogRequest withOrganization(String organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * The token to pass to get the next portion of the collection
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page_token")
    public String pageToken;
    public ListActivityLogRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * Filters entries based on the search term.
     * 
     * Supported operators:
     *   - `|` - to allow filtering by one term or another. Example: `this | that`
     *   - `+` - to allow filtering by one term and another. Example: `this + that`
     *   - `"` - to allow filtering by an exact search term. Example: `"email@website.com"`
     *   - `-` - to omit specific terms from results. Example: `Added -User`
     *   - `()` - to allow specifying precedence during a search. Example: `(this + that) OR (person + place)`
     *   - `*` - to allow prefix searching. Example `*@other-website.com`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_term")
    public String searchTerm;
    public ListActivityLogRequest withSearchTerm(String searchTerm) {
        this.searchTerm = searchTerm;
        return this;
    }
    
    /**
     * Order results by the specified field and direction. List of {field}:{direction} values.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=sort")
    public ListActivityLogSortEnum[] sort;
    public ListActivityLogRequest withSort(ListActivityLogSortEnum[] sort) {
        this.sort = sort;
        return this;
    }
    
}
