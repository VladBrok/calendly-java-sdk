/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package calendly.calendly.models.shared;

import calendly.calendly.utils.DateTimeDeserializer;
import calendly.calendly.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * Invitee - An individual who has been invited to meet with a Calendly member
 */
public class Invitee {
    /**
     * Link to cancelling the event for the invitee
     */
    @JsonProperty("cancel_url")
    public String cancelUrl;
    public Invitee withCancelUrl(String cancelUrl) {
        this.cancelUrl = cancelUrl;
        return this;
    }
    
    /**
     * Provides data pertaining to the cancellation of the Event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancellation")
    public Cancellation cancellation;
    public Invitee withCancellation(Cancellation cancellation) {
        this.cancellation = cancellation;
        return this;
    }
    
    /**
     * The moment when the event was created (e.g. "2020-01-02T03:04:05.678123Z")
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Invitee withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The invitee\u2019s email address
     */
    @JsonProperty("email")
    public String email;
    public Invitee withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * A reference to the event
     */
    @JsonProperty("event")
    public String event;
    public Invitee withEvent(String event) {
        this.event = event;
        return this;
    }
    
    /**
     * The first name of the invitee who booked the event when the event type is configured to use separate fields for first name and last name. Null when event type is configured to use a single field for name.
     */
    @JsonProperty("first_name")
    public String firstName;
    public Invitee withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * The last name of the invitee who booked the event when the event type is configured to use separate fields for first name and last name. Null when event type is configured to use a single field for name.
     */
    @JsonProperty("last_name")
    public String lastName;
    public Invitee withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * The invitee\u2019s name (in human-readable format)
     */
    @JsonProperty("name")
    public String name;
    public Invitee withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Link to new invitee, after reschedule
     */
    @JsonProperty("new_invitee")
    public String newInvitee;
    public Invitee withNewInvitee(String newInvitee) {
        this.newInvitee = newInvitee;
        return this;
    }
    
    /**
     * Provides data pertaining to the associated no show for the Invitee
     */
    @JsonProperty("no_show")
    public InviteeNoShow1 noShow;
    public Invitee withNoShow(InviteeNoShow1 noShow) {
        this.noShow = noShow;
        return this;
    }
    
    /**
     * Reference to old Invitee instance that got rescheduled
     */
    @JsonProperty("old_invitee")
    public String oldInvitee;
    public Invitee withOldInvitee(String oldInvitee) {
        this.oldInvitee = oldInvitee;
        return this;
    }
    
    /**
     * Invitee payment
     */
    @JsonProperty("payment")
    public InviteePayment payment;
    public Invitee withPayment(InviteePayment payment) {
        this.payment = payment;
        return this;
    }
    
    /**
     * A collection of the invitee's responses to questions on the event booking confirmation form
     */
    @JsonProperty("questions_and_answers")
    public InviteeQuestionAndAnswer[] questionsAndAnswers;
    public Invitee withQuestionsAndAnswers(InviteeQuestionAndAnswer[] questionsAndAnswers) {
        this.questionsAndAnswers = questionsAndAnswers;
        return this;
    }
    
    /**
     * Assuming reconfirmation is enabled for the event type, when reconfirmation is requested this object is present with a `created_at` that reflects when the reconfirmation notification was sent. Once the invitee has reconfirmed the `confirmed_at` attribute will change from `null` to a timestamp that reflects when they took action.
     */
    @JsonProperty("reconfirmation")
    public InviteeReconfirmation reconfirmation;
    public Invitee withReconfirmation(InviteeReconfirmation reconfirmation) {
        this.reconfirmation = reconfirmation;
        return this;
    }
    
    /**
     * Link to rescheduling the event for the invitee
     */
    @JsonProperty("reschedule_url")
    public String rescheduleUrl;
    public Invitee withRescheduleUrl(String rescheduleUrl) {
        this.rescheduleUrl = rescheduleUrl;
        return this;
    }
    
    /**
     * Indicates if this invitee has rescheduled. If `true`, a reference to the new Invitee instance is provided in the `new_invitee` field.
     */
    @JsonProperty("rescheduled")
    public Boolean rescheduled;
    public Invitee withRescheduled(Boolean rescheduled) {
        this.rescheduled = rescheduled;
        return this;
    }
    
    /**
     * Reference to a routing form submission that redirected the invitee to a booking page.
     */
    @JsonProperty("routing_form_submission")
    public String routingFormSubmission;
    public Invitee withRoutingFormSubmission(String routingFormSubmission) {
        this.routingFormSubmission = routingFormSubmission;
        return this;
    }
    
    /**
     * Indicates if the invitee is "active" or "canceled"
     */
    @JsonProperty("status")
    public InviteeStatusEnum status;
    public Invitee withStatus(InviteeStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The phone number to use when sending text (SMS) reminders
     */
    @JsonProperty("text_reminder_number")
    public String textReminderNumber;
    public Invitee withTextReminderNumber(String textReminderNumber) {
        this.textReminderNumber = textReminderNumber;
        return this;
    }
    
    /**
     * Time zone to use when displaying time to the invitee
     */
    @JsonProperty("timezone")
    public String timezone;
    public Invitee withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * The UTM and Salesforce tracking parameters associated with an Invitee
     */
    @JsonProperty("tracking")
    public InviteeTracking tracking;
    public Invitee withTracking(InviteeTracking tracking) {
        this.tracking = tracking;
        return this;
    }
    
    /**
     * The moment when the event was last updated (e.g. "2020-01-02T03:04:05.678123Z")
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public Invitee withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Canonical reference (unique identifier) for the invitee
     */
    @JsonProperty("uri")
    public String uri;
    public Invitee withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
}
